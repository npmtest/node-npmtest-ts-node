{"/home/travis/build/npmtest/node-npmtest-ts-node/test.js":"/* istanbul instrument in package npmtest_ts_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ts-node/lib.npmtest_ts_node.js":"/* istanbul instrument in package npmtest_ts_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ts_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ts_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ts-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ts-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ts_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ts_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ts_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ts_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ts_node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ts_node.__dirname + '/lib.npmtest_ts_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ts-node/node_modules/ts-node/dist/index.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path_1 = require(\"path\");\nvar fs_1 = require(\"fs\");\nvar os_1 = require(\"os\");\nvar sourceMapSupport = require(\"source-map-support\");\nvar mkdirp = require(\"mkdirp\");\nvar crypto = require(\"crypto\");\nvar yn = require(\"yn\");\nvar arrify = require(\"arrify\");\nvar make_error_1 = require(\"make-error\");\nvar tsconfig_1 = require(\"tsconfig\");\nvar pkg = require('../package.json');\nexports.VERSION = pkg.version;\nvar DEFAULTS = {\n    getFile: getFile,\n    fileExists: fileExists,\n    cache: yn(process.env['TS_NODE_CACHE']),\n    cacheDirectory: process.env['TS_NODE_CACHE_DIRECTORY'],\n    disableWarnings: yn(process.env['TS_NODE_DISABLE_WARNINGS']),\n    compiler: process.env['TS_NODE_COMPILER'],\n    compilerOptions: parse(process.env['TS_NODE_COMPILER_OPTIONS']),\n    project: process.env['TS_NODE_PROJECT'],\n    ignore: split(process.env['TS_NODE_IGNORE']),\n    ignoreWarnings: split(process.env['TS_NODE_IGNORE_WARNINGS']),\n    fast: yn(process.env['TS_NODE_FAST'])\n};\nfunction split(value) {\n    return value ? value.split(/ *, */g) : undefined;\n}\nexports.split = split;\nfunction parse(value) {\n    return value ? JSON.parse(value) : undefined;\n}\nexports.parse = parse;\nfunction normalizeSlashes(value) {\n    return value.replace(/\\\\/g, '/');\n}\nexports.normalizeSlashes = normalizeSlashes;\nfunction getTmpDir() {\n    var hash = crypto.createHash('sha256').update(os_1.homedir(), 'utf8').digest('hex');\n    return path_1.join(os_1.tmpdir(), \"ts-node-\" + hash);\n}\nfunction register(options) {\n    if (options === void 0) { options = {}; }\n    var compiler = options.compiler || 'typescript';\n    var emptyFileListWarnings = [18002, 18003];\n    var ignoreWarnings = arrify(options.ignoreWarnings || DEFAULTS.ignoreWarnings || []).concat(emptyFileListWarnings).map(Number);\n    var disableWarnings = !!(options.disableWarnings == null ? DEFAULTS.disableWarnings : options.disableWarnings);\n    var getFile = options.getFile || DEFAULTS.getFile;\n    var fileExists = options.fileExists || DEFAULTS.fileExists;\n    var shouldCache = !!(options.cache == null ? DEFAULTS.cache : options.cache);\n    var fast = !!(options.fast == null ? DEFAULTS.fast : options.fast);\n    var project = options.project || DEFAULTS.project;\n    var cacheDirectory = options.cacheDirectory || DEFAULTS.cacheDirectory || getTmpDir();\n    var compilerOptions = Object.assign({}, DEFAULTS.compilerOptions, options.compilerOptions);\n    var originalJsHandler = require.extensions['.js'];\n    var cache = { contents: {}, versions: {}, sourceMaps: {} };\n    var ignore = arrify((typeof options.ignore === 'boolean' ?\n        (options.ignore === false ? [] : undefined) :\n        (options.ignore || DEFAULTS.ignore)) ||\n        ['/node_modules/']).map(function (str) { return new RegExp(str); });\n    sourceMapSupport.install({\n        environment: 'node',\n        retrieveSourceMap: function (fileName) {\n            if (cache.sourceMaps[fileName]) {\n                return {\n                    url: cache.sourceMaps[fileName],\n                    map: getFile(cache.sourceMaps[fileName])\n                };\n            }\n        }\n    });\n    var cwd = process.cwd();\n    var ts = require(compiler);\n    var config = readConfig(compilerOptions, project, cwd, ts);\n    var configDiagnostics = filterDiagnostics(config.errors, ignoreWarnings, disableWarnings);\n    var extensions = ['.ts', '.tsx'];\n    var cachedir = path_1.join(path_1.resolve(cwd, cacheDirectory), getCompilerDigest({ version: ts.version, fast: fast, ignoreWarnings: ignoreWarnings, disableWarnings: disableWarnings, config: config, compiler: compiler }));\n    mkdirp.sync(cachedir);\n    if (configDiagnostics.length) {\n        throw new TSError(formatDiagnostics(configDiagnostics, cwd, ts, 0));\n    }\n    if (config.options.target === undefined) {\n        config.options.target = ts.ScriptTarget.ES5;\n    }\n    if (config.options.module === undefined) {\n        config.options.module = ts.ModuleKind.CommonJS;\n    }\n    if (config.options.allowJs) {\n        extensions.push('.js');\n    }\n    for (var _i = 0, _a = config.fileNames; _i < _a.length; _i++) {\n        var fileName = _a[_i];\n        if (/\\.d\\.ts$/.test(fileName)) {\n            cache.versions[fileName] = 1;\n        }\n    }\n    function getExtension(fileName) {\n        if (config.options.jsx === ts.JsxEmit.Preserve && path_1.extname(fileName) === '.tsx') {\n            return '.jsx';\n        }\n        return '.js';\n    }\n    var getOutput = function (code, fileName, lineOffset) {\n        if (lineOffset === void 0) { lineOffset = 0; }\n        var result = ts.transpileModule(code, {\n            fileName: fileName,\n            compilerOptions: config.options,\n            reportDiagnostics: true\n        });\n        var diagnosticList = result.diagnostics ?\n            filterDiagnostics(result.diagnostics, ignoreWarnings, disableWarnings) :\n            [];\n        if (diagnosticList.length) {\n            throw new TSError(formatDiagnostics(diagnosticList, cwd, ts, lineOffset));\n        }\n        return [result.outputText, result.sourceMapText];\n    };\n    var compile = readThrough(cachedir, shouldCache, getFile, fileExists, cache, getOutput, getExtension);\n    var getTypeInfo = function (_fileName, _position) {\n        throw new TypeError(\"No type information available under \\\"--fast\\\" mode\");\n    };\n    if (!fast) {\n        var addVersion_1 = function (fileName) {\n            if (!cache.versions.hasOwnProperty(fileName)) {\n                cache.versions[fileName] = 1;\n            }\n        };\n        var addCache_1 = function (code, fileName) {\n            cache.contents[fileName] = code;\n            cache.versions[fileName] += 1;\n        };\n        var serviceHost = {\n            getScriptFileNames: function () { return Object.keys(cache.versions); },\n            getScriptVersion: function (fileName) { return String(cache.versions[fileName]); },\n            getScriptSnapshot: function (fileName) {\n                if (!cache.contents.hasOwnProperty(fileName)) {\n                    if (!fileExists(fileName)) {\n                        return undefined;\n                    }\n                    cache.contents[fileName] = getFile(fileName);\n                }\n                return ts.ScriptSnapshot.fromString(cache.contents[fileName]);\n            },\n            getDirectories: getDirectories,\n            directoryExists: directoryExists,\n            getNewLine: function () { return os_1.EOL; },\n            getCurrentDirectory: function () { return cwd; },\n            getCompilationSettings: function () { return config.options; },\n            getDefaultLibFileName: function () { return ts.getDefaultLibFilePath(config.options); }\n        };\n        var service_1 = ts.createLanguageService(serviceHost);\n        getOutput = function (_code, fileName, lineOffset) {\n            if (lineOffset === void 0) { lineOffset = 0; }\n            var output = service_1.getEmitOutput(fileName);\n            var diagnostics = service_1.getCompilerOptionsDiagnostics()\n                .concat(service_1.getSyntacticDiagnostics(fileName))\n                .concat(service_1.getSemanticDiagnostics(fileName));\n            var diagnosticList = filterDiagnostics(diagnostics, ignoreWarnings, disableWarnings);\n            if (diagnosticList.length) {\n                throw new TSError(formatDiagnostics(diagnosticList, cwd, ts, lineOffset));\n            }\n            if (output.emitSkipped) {\n                throw new TypeError(path_1.relative(cwd, fileName) + \": Emit skipped\");\n            }\n            if (output.outputFiles.length === 0) {\n                throw new TypeError('Unable to require `.d.ts` file.\\n' +\n                    'This is usually the result of a faulty configuration or import. ' +\n                    'Make sure there is a `.js`, `.json` or another executable extension and ' +\n                    'loader (attached before `ts-node`) available alongside ' +\n                    (\"`\" + path_1.basename(fileName) + \"`.\"));\n            }\n            return [output.outputFiles[1].text, output.outputFiles[0].text];\n        };\n        compile = readThrough(cachedir, shouldCache, getFile, fileExists, cache, function (code, fileName, lineOffset) {\n            addVersion_1(fileName);\n            addCache_1(code, fileName);\n            return getOutput(code, fileName, lineOffset);\n        }, getExtension);\n        getTypeInfo = function (fileName, position) {\n            addVersion_1(fileName);\n            var info = service_1.getQuickInfoAtPosition(fileName, position);\n            var name = ts.displayPartsToString(info ? info.displayParts : []);\n            var comment = ts.displayPartsToString(info ? info.documentation : []);\n            return { name: name, comment: comment };\n        };\n    }\n    var register = { cwd: cwd, compile: compile, getTypeInfo: getTypeInfo, extensions: extensions };\n    extensions.forEach(function (extension) { return registerExtension(extension, ignore, register, originalJsHandler); });\n    return register;\n}\nexports.register = register;\nfunction shouldIgnore(filename, ignore) {\n    var relname = normalizeSlashes(filename);\n    return ignore.some(function (x) { return x.test(relname); });\n}\nfunction registerExtension(ext, ignore, register, originalHandler) {\n    var old = require.extensions[ext] || originalHandler;\n    require.extensions[ext] = function (m, filename) {\n        if (shouldIgnore(filename, ignore)) {\n            return old(m, filename);\n        }\n        var _compile = m._compile;\n        m._compile = function (code, fileName) {\n            return _compile.call(this, register.compile(code, fileName), fileName);\n        };\n        return old(m, filename);\n    };\n}\nfunction readConfig(compilerOptions, project, cwd, ts) {\n    var result = tsconfig_1.loadSync(cwd, typeof project === 'string' ? project : undefined);\n    result.config.compilerOptions = Object.assign({}, result.config.compilerOptions, compilerOptions, {\n        sourceMap: true,\n        inlineSourceMap: false,\n        inlineSources: true,\n        declaration: false,\n        noEmit: false,\n        outDir: '$$ts-node$$'\n    });\n    delete result.config.compilerOptions.out;\n    delete result.config.compilerOptions.outFile;\n    delete result.config.compilerOptions.declarationDir;\n    var configPath = result.path && normalizeSlashes(result.path);\n    var basePath = configPath ? path_1.dirname(configPath) : normalizeSlashes(cwd);\n    if (typeof ts.parseConfigFile === 'function') {\n        return ts.parseConfigFile(result.config, ts.sys, basePath);\n    }\n    if (typeof ts.parseJsonConfigFileContent === 'function') {\n        return ts.parseJsonConfigFileContent(result.config, ts.sys, basePath, undefined, configPath);\n    }\n    throw new TypeError('Could not find a compatible `parseConfigFile` function');\n}\nfunction readThrough(cachedir, shouldCache, getFile, fileExists, cache, compile, getExtension) {\n    if (shouldCache === false) {\n        return function (code, fileName, lineOffset) {\n            var cachePath = path_1.join(cachedir, getCacheName(code, fileName));\n            var extension = getExtension(fileName);\n            var sourceMapPath = \"\" + cachePath + extension + \".map\";\n            var out = compile(code, fileName, lineOffset);\n            cache.sourceMaps[fileName] = sourceMapPath;\n            var output = updateOutput(out[0], fileName, extension, sourceMapPath);\n            var sourceMap = updateSourceMap(out[1], fileName);\n            fs_1.writeFileSync(sourceMapPath, sourceMap);\n            return output;\n        };\n    }\n    return function (code, fileName, lineOffset) {\n        var cachePath = path_1.join(cachedir, getCacheName(code, fileName));\n        var extension = getExtension(fileName);\n        var outputPath = \"\" + cachePath + extension;\n        var sourceMapPath = outputPath + \".map\";\n        cache.sourceMaps[fileName] = sourceMapPath;\n        if (fileExists(outputPath)) {\n            return getFile(outputPath);\n        }\n        var out = compile(code, fileName, lineOffset);\n        var output = updateOutput(out[0], fileName, extension, sourceMapPath);\n        var sourceMap = updateSourceMap(out[1], fileName);\n        fs_1.writeFileSync(outputPath, output);\n        fs_1.writeFileSync(sourceMapPath, sourceMap);\n        return output;\n    };\n}\nfunction updateOutput(outputText, fileName, extension, sourceMapPath) {\n    var ext = path_1.extname(fileName);\n    var originalPath = path_1.basename(fileName).slice(0, -ext.length) + (extension + \".map\");\n    return outputText.slice(0, -originalPath.length) + sourceMapPath.replace(/\\\\/g, '/');\n}\nfunction updateSourceMap(sourceMapText, fileName) {\n    var sourceMap = JSON.parse(sourceMapText);\n    sourceMap.file = fileName;\n    sourceMap.sources = [fileName];\n    delete sourceMap.sourceRoot;\n    return JSON.stringify(sourceMap);\n}\nfunction getCacheName(sourceCode, fileName) {\n    return crypto.createHash('sha256')\n        .update(path_1.extname(fileName), 'utf8')\n        .update('\\0', 'utf8')\n        .update(sourceCode, 'utf8')\n        .digest('hex');\n}\nfunction getCompilerDigest(opts) {\n    return crypto.createHash('sha256').update(JSON.stringify(opts), 'utf8').digest('hex');\n}\nfunction fileExists(fileName) {\n    try {\n        var stats = fs_1.statSync(fileName);\n        return stats.isFile() || stats.isFIFO();\n    }\n    catch (err) {\n        return false;\n    }\n}\nexports.fileExists = fileExists;\nfunction getDirectories(path) {\n    return fs_1.readdirSync(path).filter(function (name) { return directoryExists(path_1.join(path, name)); });\n}\nexports.getDirectories = getDirectories;\nfunction directoryExists(path) {\n    try {\n        return fs_1.statSync(path).isDirectory();\n    }\n    catch (err) {\n        return false;\n    }\n}\nexports.directoryExists = directoryExists;\nfunction getFile(fileName) {\n    return fs_1.readFileSync(fileName, 'utf8');\n}\nexports.getFile = getFile;\nfunction filterDiagnostics(diagnostics, ignore, disable) {\n    if (disable) {\n        return [];\n    }\n    return diagnostics.filter(function (x) { return ignore.indexOf(x.code) === -1; });\n}\nfunction formatDiagnostics(diagnostics, cwd, ts, lineOffset) {\n    return diagnostics.map(function (x) { return formatDiagnostic(x, cwd, ts, lineOffset); });\n}\nexports.formatDiagnostics = formatDiagnostics;\nfunction formatDiagnostic(diagnostic, cwd, ts, lineOffset) {\n    var messageText = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n    if (diagnostic.file) {\n        var path = path_1.relative(cwd, diagnostic.file.fileName);\n        var _a = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start), line = _a.line, character = _a.character;\n        var message = path + \" (\" + (line + 1 + lineOffset) + \",\" + (character + 1) + \"): \" + messageText + \" (\" + diagnostic.code + \")\";\n        return { message: message, code: diagnostic.code };\n    }\n    return { message: messageText + \" (\" + diagnostic.code + \")\", code: diagnostic.code };\n}\nexports.formatDiagnostic = formatDiagnostic;\nvar TSError = (function (_super) {\n    __extends(TSError, _super);\n    function TSError(diagnostics) {\n        var _this = _super.call(this, \"\\u2A2F Unable to compile TypeScript\\n\" + diagnostics.map(function (x) { return x.message; }).join('\\n')) || this;\n        _this.diagnostics = diagnostics;\n        _this.name = 'TSError';\n        return _this;\n    }\n    return TSError;\n}(make_error_1.BaseError));\nexports.TSError = TSError;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-ts-node/node_modules/ts-node/register.js":"require('./').register()\n"}